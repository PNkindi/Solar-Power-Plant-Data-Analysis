# -*- coding: utf-8 -*-
"""Essential of Big Data Analytics-Final Exam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ePfQFkRaNjhI6lhkuWGZ91xZGmTmX0AZ

This data has been gathered at two solar power plants over 34 days(From 2020-05-15 to 2020-06-17).
It has two pairs of files - each pair has one power energy generation dataset and
one weather sensor readings dataset.

# **Exploratory Data Analysis**

## Import needed libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('darkgrid')
import warnings
import datetime as dt
import matplotlib.dates as mdates
warnings.filterwarnings('ignore')

"""## Load data of Plant 1"""

#load Plant_1_Generation_Data.csv file in dataframe
plant_gen_1=pd.read_csv('/content/Plant_1_Generation_Data.csv')
#load Plant_1_Weather_Sensor_Data.csv file in dataframe
plant_sens_1= pd.read_csv('/content/Plant_1_Weather_Sensor_Data.csv')

#format datetime
plant_gen_1['DATE_TIME']= pd.to_datetime(plant_gen_1['DATE_TIME'],format='%d-%m-%Y %H:%M')
plant_sens_1['DATE_TIME']= pd.to_datetime(plant_sens_1['DATE_TIME'],format='%Y-%m-%d %H:%M:%S')

#check number of columns and rows for plant 1 generation dataframe
plant_gen_1.shape

#check number of columns and rows for plant 1 weather dataframe
plant_sens_1.shape

"""## Load data of Plant 2"""

#load Plant_2_Generation_Data.csv file in dataframe
plant_gen_2=pd.read_csv('/content/Plant_2_Generation_Data.csv')
#load Plant_2_Weather_Sensor_Data.csv file in dataframe
plant_sens_2= pd.read_csv('/content/Plant_2_Weather_Sensor_Data.csv')

#format datetime
plant_gen_2['DATE_TIME']= pd.to_datetime(plant_gen_2['DATE_TIME'],format='%Y-%m-%d %H:%M:%S')
plant_sens_2['DATE_TIME']= pd.to_datetime(plant_sens_2['DATE_TIME'],format='%Y-%m-%d %H:%M:%S')

#check number of columns and rows for plant 2 generation dataframe
plant_gen_2.shape

#check number of columns and rows for plant 1 weather dataframe
plant_sens_2.shape

"""## Data cleaning

### Plant_1_Generation_Data

#### Display last 5 rows of Plant_1_Generation_Data
"""

#display last rows of Plant 1 generation dataframe
plant_gen_1.tail()

#check information like data type and missing values for plant 1 generation dataframe
plant_gen_1.info()

# Count the number of solar panel at plant 1
num_solar_panel = plant_gen_1['SOURCE_KEY'].nunique()
print("Number of Solar Panel at Plant 1 was : ", num_solar_panel)

# Add column of plant 1 Efficiency to dataframe
plant_gen_1['Efficiency']= plant_gen_1.AC_POWER * 10 / plant_gen_1.DC_POWER
plant_gen_1.head()

#Check for statical description of plant 1 generation dataframe
plant_gen_1.describe()

"""we can observe the maximum generated DC_Power was 14471.125kwh and the maximum AC_Power were 9163kwh, with mean efficiency of 0.977"""

#Check the time when Plant 1 generated the maximum DC_Power
DC_power_counts = plant_gen_1['DC_POWER'].groupby(plant_gen_1['DATE_TIME']).size()
max_DC_Power_time = DC_power_counts.idxmax()
print("The maximum DC_Power generated by Plant 1 was on : ",max_DC_Power_time)

"""**Observation:**
Plant 1 with ID 4135001 has data that have 7 columns and 68778 rows which has no null values, and it has 22 solar panels which generates energy, where the maximum DC_Power is 14471.125 KWh generated on 2020-05-15 at 1:00 PM sharp and the average converted AC_Power is 307.8 KWh with mean efficiency of 97.7%

#### Separate DATE_TIME into date and time columns for Plant 1 dataset, then only keep necessary columns
"""

#Aggregate the data recorded by date and time with interval of 15 minutes, Then separate the DATE_TIME into time and date columns
plant1_energy=plant_gen_1
plant1_energy = plant1_energy.groupby('DATE_TIME')[['DC_POWER','AC_POWER','DAILY_YIELD','TOTAL_YIELD', 'Efficiency']].agg('sum')
plant1_energy = plant1_energy.reset_index()
plant1_energy['DATE_TIME'] = pd.to_datetime(plant1_energy['DATE_TIME'], errors='coerce')
plant1_energy['time'] = plant1_energy['DATE_TIME'].dt.time
plant1_energy['date'] = pd.to_datetime(plant1_energy['DATE_TIME'].dt.date)

#Display the last 5 rows of new dataframe of Plant 1 data with 15min interval
plant1_energy.tail()

"""### Plant_1_Weather_Sensor_Data

#### Display 5 last rows of Plant_1_Weather_Sensor_Data
"""

#show last rows of weather data for Plant 1
plant_sens_1.tail()

#check information regarding null values, columns, rows and data type for plant 1 weather data
plant_sens_1.info()

"""Plant 1 weather data has 6 columns, 3182 rows with non-null values"""

#check for statistical description of the dataframe
plant_sens_1.describe()

"""**Observation:**
Plant 1 with ID 4135001 had one weather sensor which recorded data with 6 columns and 3182 rows with no null values, the maximum ambient temperature recrded was 35.25C and module temperature were 65.54C

#### Separate DATE_TIME into date and time columns, then delete Source_key as it is the same for all rows of Plant 1 weather data
"""

#split the DATE_TIME column into time and date columns for the weater dataframe
plant1_weather=plant_sens_1
plant1_weather['DATE_TIME'] = pd.to_datetime(plant1_weather['DATE_TIME'], errors='coerce')
plant1_weather['date'] = pd.to_datetime(pd.to_datetime(plant1_weather['DATE_TIME']).dt.date)
plant1_weather['time'] = pd.to_datetime(plant1_weather['DATE_TIME']).dt.time
# drop the source_key column
del plant1_weather['SOURCE_KEY']

#display the last rows of the new Plant 1 weather dataframe
plant1_weather.tail()

"""### Merge both datasets of Plant_1_Generation_Data and Plant_1_Weather_Sensor_Data"""

#Concatnate columns data of weather dataframe to generated dataframe
plant1_data = plant1_weather.merge(plant1_energy, left_on='DATE_TIME', right_on='DATE_TIME')
#drop the date and time columns as there are duplicate
del plant1_data['date_x']
del plant1_data['time_x']

"""#### Diplay 5 first rows of plant 1 data combined power generation and weather senser"""

#display first rows of plant 1 dataframe(Generation and Weather data combined)
plant1_data.head()

"""## Plant_2_Generation_Data

#### Display 5 first rows of Plant 2 Generation Data
"""

#display first rows of Plant 2 generation data
plant_gen_2.head()

#check infoormation of the dataframe
plant_gen_2.info()

# Count the number of solar panel at plant 2
num_solar_panel2 = plant_gen_2['SOURCE_KEY'].nunique()
print("Number of Solar Panel at Plant 2 was : ", num_solar_panel2)

#Add Efficiency column to Plant 2 generation dataframe
plant_gen_2['Efficiency']= plant_gen_2.AC_POWER / plant_gen_2.DC_POWER
plant_gen_2.head()

#check for statistical description of the dataframe
plant_gen_2.describe()

"""**Observation:**
Plant 2 has ID 4136001 with data of 7 columns and 67698 rows with no null values, generated maximum DC_Power was 1420.93Kwh with AC_Power of 1385.42Kwh with mean efficiency of 97.6%

#### Separate DATE_TIME into date and time columns, then delete Source_key as it is the same for all rows
"""

#split DATE_TIME column into time and date
plant2_energy=plant_gen_2
plant2_energy = plant2_energy.groupby('DATE_TIME')[['DC_POWER','AC_POWER', 'DAILY_YIELD','TOTAL_YIELD','Efficiency']].agg('sum')
plant2_energy = plant2_energy.reset_index()
plant2_energy['DATE_TIME'] = pd.to_datetime(plant2_energy['DATE_TIME'], errors='coerce')
plant2_energy['time'] = plant2_energy['DATE_TIME'].dt.time
plant2_energy['date'] = pd.to_datetime(plant2_energy['DATE_TIME'].dt.date)

#display last rows of Plant 2 generation dataframe with time and data columns
plant2_energy.tail()

"""### Plant_2_Weather_Sensor_Data

#### Display 5 last rows of Plant_2_Weather_Sensor_Data
"""

#display last rows of weather data for Plant 2
plant_sens_2.tail()

#check information about plant 2 weather dataframe
plant_sens_2.info()

#check statistical description of Plant 2 weather dataframe
plant_sens_2.describe()

"""**Observation:**
Plant 2 with ID 41365001 had one weather sensor which recorded data with 6 columns and 3259 rows with no null values, the maximum ambient temperature recrded was 39.18C and module temperature were 66.63C

#### Separate DATE_TIME into date and time columns, then delete Source_key as it is the same for all rows
"""

#split DATE_TIME column into time and date
plant2_weather=plant_sens_2
plant2_weather['DATE_TIME'] = pd.to_datetime(plant2_weather['DATE_TIME'], errors='coerce')
plant2_weather['date'] = pd.to_datetime(pd.to_datetime(plant2_weather['DATE_TIME']).dt.date)
plant2_weather['time'] = pd.to_datetime(plant2_weather['DATE_TIME']).dt.time
# drop the source key column
del plant2_weather['SOURCE_KEY']

#display last rows of new Plant 2 weather dataframe
plant2_weather.tail()

"""### Merge both datasets of Plant_1_Generation_Data and Plant_1_Weather_Sensor_Data"""

#Concatenate both dataset of Plant 2 generation and weather and drop duplicated columns(time and date)
plant2_data = plant2_weather.merge(plant2_energy, left_on='DATE_TIME', right_on='DATE_TIME')
del plant2_data['date_x']
del plant2_data['time_x']

"""#### Diplay 5 first rows of plant 2 data combined power generation and weather senser"""

#display the first rows of Plant 2 combined data
plant2_data.head()

"""# **Plant 1 and Plant 2 Comparisons of power generation**

### Let's assess the correlation of our Plant 1 and 2 data
"""

#Plant1 correlation of features
corr = plant1_data.drop(columns=['DATE_TIME','PLANT_ID','time_y','date_y']).corr(method = 'spearman')
plt.figure(dpi=100)
sns.heatmap(corr, robust=True, annot=True, fmt='0.3f', linewidths=.5, square=True)
plt.show()

#Plant2 correlation of features
corr = plant2_data.drop(columns=['DATE_TIME','PLANT_ID','time_y','date_y']).corr(method = 'spearman')
plt.figure(dpi=100)
sns.heatmap(corr, robust=True, annot=True, fmt='0.3f', linewidths=.5, square=True)
plt.show()

"""We can observe DC_Power is hilghly correlated to AC_Power at 100% which means the generated DC_Power goes throught the inverter to be converted into AC_Power with less energy loss, and also there is high correlation of Irradiation at 99.2%(Pant1) & 95.5(Pant2) and Module_Temperature at 90%(Pant1) & 84.2%(Plant2), which means the higher the sunlight intensity increases the Module_temperature and result in gradually increase in solar panel DC_Power production.

### Let's compare Plant1 and 2 power distribution
"""

# DC output from solar module
DCcompare = plant1_energy.plot(x='time', y='DC_POWER', figsize=(15,5), legend=True, style='.', label='Plant 1')
plant2_energy.plot(x='time', y='DC_POWER', legend=True, style='.', label='Plant 2', ax=DCcompare)
plt.title('DC Power Output for Each Plant')
plt.ylabel('Power')
plt.show()

# AC output from inverter
ACcompare = plant1_energy.plot(x='time', y='AC_POWER', figsize=(15,5), legend=True, style='.', label='Plant 1')
plant2_energy.plot(x='time', y='DC_POWER', legend=True, style='.', label='Plant 2', ax=ACcompare)
plt.title('AC Power Output for Each Plant')
plt.ylabel('Power')
plt.show()

"""There is no recorded instance of ac_power at 5:33; which means that
   there is no production before 5:33. For the same reason can be concluded
   that there are no production at or after 18:45.

**Observation:**

Power output is generated with the presence of sunlight, which starts at around 05:33hrs and ends at around 16:40hrs. But we can oberve the DC_Power generated by plant 2 is low compared to plant 1, then when it has gone throught the inverter of Plant2 the AC_Power get boosted to be higher to the level of the one generated by plant 1. This might be due two the plant 2 were located in rainny or cloudly area compared to plant 1 area which might be sunny

# a. Use the data to analyze how solar panel efficiency behaves as environmental conditions (like sunlight intensity) approach certain operational limits. Examine if there are points of discontinuity or leveling off in efficiency.

### Distribution of Plant 1 DC_Power and IRRADIATION(sunlight intensity) accross daily time
"""

#Plant 1 DC_Power data distribution
plant1_energy.plot(x= 'time', y='DC_POWER', style='.', figsize = (15, 8))
plant1_energy.groupby('time')['DC_POWER'].agg('mean').plot(legend=True, colormap='Reds_r')
plt.ylabel('DC Power')
plt.title('Plant 1 DC POWER plot')
plt.show()

#Plant 1 Irradiation data distribution
plant1_weather.plot(x= 'time', y='IRRADIATION', style='.', figsize = (15, 8))
plant1_weather.groupby('time')['IRRADIATION'].agg('mean').plot(legend=True, colormap='Reds_r')
plt.ylabel('IRRADIATION')
plt.title('Plant 1 IRRADIATION plot')
plt.show()

"""In the graph above is clear that irradiation is zero between
   18:45 and 5:45 but in a closer inspection there are values other than
   zero before 6:00 and also after 18:30. Those values might correspond to
   high sensitivity of the sensor, but irradiation too low to be usable by
   the solar panels.

### Distribution of Plant 2 DC_Power and IRRADIATION(sunlight intensity) accross daily time
"""

# Plant2 DC_Power data distribution
plant2_energy.plot(x= 'time', y='DC_POWER', style='.', figsize = (15, 8))
plant2_energy.groupby('time')['DC_POWER'].agg('mean').plot(legend=True, colormap='Reds_r')
plt.ylabel('DC Power')
plt.title('Plant 2 DC POWER plot')
plt.show()

#Plant 2 Irradiation data distribution
plant2_weather.plot(x= 'time', y='IRRADIATION', style='.', figsize = (15, 8))
plant2_weather.groupby('time')['IRRADIATION'].agg('mean').plot(legend=True, colormap='Reds_r')
plt.ylabel('IRRADIATION')
plt.title('Plant 2 IRRADIATION plot')
plt.show()

"""**Observation:**

Power output is generated with the presence of sunlight, which starts at around 05:33 hrs and ends at around 18:00hrs.
We can confirm the correlation between power generation and the sunlight of the solar panel effeciency, we see on the above graphs either DC_Power and Irradiation start rising after 5:33 when the Sun Set On at the begining of the day and it starts fall after 16:40 as the Sun Set Off at the end of the day

## Plant 1 and 2 Efficiency comparison
"""

#Plant 1 efficiency
plant1_data.groupby('time_y')['Efficiency'].agg('mean').plot(legend=True, colormap='Reds_r')
plt.ylabel('Efficiency')
plt.title('Plant 1 Efficiency plot')
plt.show()

#Plant 2 efficiency
plant2_data.groupby('time_y')['Efficiency'].agg('mean').plot(legend=True, colormap='Reds_r')
plt.ylabel('Efficiency')
plt.title('Plant 2 Efficiency plot')
plt.show()

"""**Insight:**

We observe for the efficiency of Plant 1 rose to the highest when the Sun set On at the begining of the day(05:33) and it stays high untill the Sun set Off after 16:40, where we observe the drop of efficiency at around 18:00.
While for Plant 2 during the day they were a drop of efficiency at 11:06 which might be due to the rain that causes less irradiation(Sunlight intensity)

# b. Utilize the dataset to model how changes in factors like sunlight intensity or panel orientation impact the rate of energy production. This involves calculating the derivative of the energy output with respect to these variables.
"""

# for plant 1 plot AC_Power vs Irradiation
_, ax = plt.subplots(1, 1, figsize=(12,6))
ax.plot(plant1_data['IRRADIATION'], plant1_data['AC_POWER'], marker='o', linestyle='', alpha=0.5, ms=10, label='Data')
ax.grid()
ax.margins(0.05)
ax.legend()
plt.title('Plant 1 AC Power vs. Irradiation')
plt.xlabel('Irradiation')
plt.ylabel('AC Power')
plt.show()

# for plant 2 plot AC_Power vs Irradiation
_, ax = plt.subplots(1, 1, figsize=(12,6))
ax.plot(plant2_data['IRRADIATION'], plant2_data['AC_POWER'], marker='o', linestyle='', alpha=0.5, ms=10, label='Data')
ax.grid()
ax.margins(0.05)
ax.legend()
plt.title('Plant 2 AC Power vs. Irradiation')
plt.xlabel('Irradiation')
plt.ylabel('AC Power')
plt.show()

from scipy.interpolate import interp1d

# Calculate energy output (assuming AC_POWER represents energy output)
Plant1_energy = plant1_data['AC_POWER']

# Choose variable: sunlight intensity (irradiation)
Plant1_sunlight_intensity = plant1_data['IRRADIATION']

# Remove NaN and infinite values from sunlight_intensity and energy_output
Plant1_sunlight_intensity_cleaned = Plant1_sunlight_intensity.dropna()
Plant1_energy_cleaned = Plant1_energy.dropna()

# Interpolate energy output to smooth the data
Plant1_energy_interp = interp1d(Plant1_sunlight_intensity_cleaned, Plant1_energy_cleaned, kind='linear')

# Calculate the derivative of energy output with respect to sunlight intensity
Rate_of_energy = np.gradient(Plant1_energy_interp(Plant1_sunlight_intensity_cleaned), Plant1_sunlight_intensity_cleaned)

# Plotting
plt.figure(figsize=(10, 6))

plt.subplot(2, 1, 1)
plt.scatter(Plant1_sunlight_intensity_cleaned, Plant1_energy_cleaned, color='blue', label='Energy Output')
plt.xlabel('Sunlight Intensity (IRRADIATION)')
plt.ylabel('Energy Output')
plt.title('Energy Output vs Sunlight Intensity')
plt.legend()

plt.subplot(2, 1, 2)
plt.scatter(Plant1_sunlight_intensity_cleaned, Rate_of_energy, color='red', label='Derivative of Energy Output')
plt.xlabel('Sunlight Intensity (IRRADIATION)')
plt.ylabel('Rate of energy')
plt.title('Rate of Change of Energy Output vs Sunlight Intensity')
plt.legend()

plt.tight_layout()
plt.show()

"""We can see Energy output points are distributed in liner model as the Sunlight Intensity increases, which means if the solar panel is positioned to maximize the sunlight intensity it will result in high rate of energy production"""

from scipy.interpolate import interp1d

# Calculate energy output (assuming AC_POWER represents energy output)
Plant2_energy = plant2_data['AC_POWER']

# Choose variable: sunlight intensity (irradiation)
Plant2_sunlight_intensity = plant2_data['IRRADIATION']

# Remove NaN and infinite values from sunlight_intensity and energy_output
Plant2_sunlight_intensity_cleaned = Plant2_sunlight_intensity.dropna()
Plant2_energy_cleaned = Plant2_energy.dropna()

# Interpolate energy output to smooth the data
Plant2_energy_interp = interp1d(Plant2_sunlight_intensity_cleaned, Plant2_energy_cleaned, kind='linear')

# Calculate the derivative of energy output with respect to sunlight intensity
Rate_of_energy = np.gradient(Plant2_energy_interp(Plant2_sunlight_intensity_cleaned), Plant2_sunlight_intensity_cleaned)

# Plotting
plt.figure(figsize=(10, 6))

plt.subplot(2, 1, 1)
plt.scatter(Plant2_sunlight_intensity_cleaned, Plant2_energy_cleaned, color='blue', label='Energy Output')
plt.xlabel('Sunlight Intensity (IRRADIATION)')
plt.ylabel('Energy Output')
plt.title('Energy Output vs Sunlight Intensity')
plt.legend()

plt.subplot(2, 1, 2)
plt.scatter(Plant2_sunlight_intensity_cleaned, Rate_of_energy, color='red', label='Derivative of Energy Output')
plt.xlabel('Sunlight Intensity (IRRADIATION)')
plt.ylabel('Rate of energy')
plt.title('Rate of Change of Energy Output vs Sunlight Intensity')
plt.legend()

plt.tight_layout()
plt.show()

"""**Insight:**

This graph shows how AC_POWER varies with irradiation. There are certain points where even though there is some irradiation, the value of AC_POWER is zero. This means that at that point, an inverter was not working. But there are some values for which, even though there is exact same irradiation, the AC_POWER is varying. This is because there is a single irradiation sensor for the whole plant. Due to various reasons, same quality panels may not give same output(eg.one panel might be cleaner than the other). So there seems to be streaking.

# c. Analyze cumulative solar energy production over time by integrating the power output data. This can help in understanding total energy yield under different conditions over a specific period.
"""

#plot the cummulative daily produced energy of Plant 1
plant1_energy.plot(x='time', y='DAILY_YIELD', style='r.', figsize=(15,5))
plant1_energy.groupby('time')['DAILY_YIELD'].agg('mean').plot(legend=True, colormap='Reds_r')
plt.title('DAILY YIELD')
plt.ylabel('Yield')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Set figure size
plt.figure(figsize=(15, 8))

# Daily Ambient Temperature
ambtemp_compare = sns.lineplot(x='DATE_TIME', y='DAILY_YIELD', data=plant1_energy, err_style='band', label='Plant 1')
sns.lineplot(x='DATE_TIME', y='DAILY_YIELD', data=plant2_energy, err_style='band', label='Plant 2', ax=ambtemp_compare)
plt.ylabel('DAILY_YIELD')
plt.xlabel('Date')
plt.title('DAILY_YIELD for Both Plants')
plt.xticks(rotation=45)
plt.show()

"""**Observation:**

We can observe the graph of cumulative enargy production as in the morning it is below of 25000 and it goes on increasing all along the daily hours

# d. Create models using differential equations to predict future trends in energy production based on current and past data trends. This can involve formulating equations that describe the rate of change in energy output.

# Training and Prediction
"""

#check for plant 1 features
plant1_data.columns

#check relation between two variables Ambient_temperature and AC_Power
sns.lmplot(x='AMBIENT_TEMPERATURE', y='AC_POWER', data=plant1_data)
plt.show()

"""# Splitting data and fitting into model"""

#split dataframe into input variables and output
X = plant1_data[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']] # Features
y = plant1_data['AC_POWER'] # Target

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import pandas as pd

# Assuming X and y are defined elsewhere

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # Splits train and test sets

# Training the model
lm = LinearRegression() # creates an instance of LinearRegression() model
lm.fit(X_train, y_train) # fit on training data

print('PLANT 1')
print('The intercept for the linear regression is at', round(lm.intercept_, 2))
print('The linear regression coefficients are:')

coef_df = pd.DataFrame(lm.coef_, X.columns, columns=['Coeff']).round(2)
print(coef_df)

"""**The linear equation for Plant 1 can be written as:**

y = -393.18 - 21.13 * A + 48.07 * M + 26684.08 * I

AC_POWER = -393.18 - 21.13 * AMBIENT_TEMPERATURE + 48.07 * MODULE_TEMPERATURE + 26684.08 * IRRADIATION

Where:
the predicted output are y(AC_POWER), then
A(AMBIENT_TEMPERATURE), M(MODULE_TEMPERATURE), and
I(IRRADIATION) are the input variables.

# Predicting from models
"""

#Use the trained model to predict the output
predictions1 = lm.predict(X_test)
predictions1

#with scatter plot compare the Actual generated AC_Power to Predicted AC_Power
plt.scatter(y_test, predictions1)
plt.title('Actual Solar Output Values vs Predicted Values for Plant 1')
plt.xlabel('Predicted Output')
plt.ylabel('Actual Output')

"""We can see our data are linear distributed, which means the model prediction performance is good

# Evaluating the models
"""

from sklearn import metrics

# check for metric like Mean Absolute Error, Mean Square Error and Root Mean Square Error
MAE1 = metrics.mean_absolute_error(y_test,predictions1)
MSE1 = metrics.mean_squared_error(y_test,predictions1)
RMSE1 = np.sqrt(metrics.mean_squared_error(y_test,predictions1))
print('Metrics for Plant 1 Linear Model')
print('MAE: ', round(MAE1, 2))
print('MSE: ', round(MSE1, 2))
print('RMSE: ', round(RMSE1, 2))

"""For Plant 1, a unit increase in irradiation results in roughly 26500.433104kW ± 735.74kW (RMSE) increase in AC output. (Values slightly differ every run)
Plant 1 is more predictable than Plant 2, with tighter regression and lower RMSE values.
"""